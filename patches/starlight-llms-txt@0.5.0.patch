diff --git a/entryToSimpleMarkdown.ts b/entryToSimpleMarkdown.ts
index 1bd6fbfb1f35df938061693de3bebe627b74c8c3..1bd8c207eb6144f6e34450eef801f5dbf809f7c3 100644
--- a/entryToSimpleMarkdown.ts
+++ b/entryToSimpleMarkdown.ts	
@@ -63,6 +63,23 @@ const htmlToMarkdownPipeline = unified()
 			return tree;
 		};
 	})
+	.use(function skipReactComponents() {
+		return (tree) => {
+			// Find and remove React components
+			remove(tree, (_node) => {
+				const node = _node as RootContent;
+				
+				// Check for client:only="react" attribute
+				if (node.type === 'element' && node.properties) {
+					const clientOnly = node.properties['client:only'];
+					if (clientOnly === 'react') {
+						return true; // Remove React components entirely
+					}
+				}
+				return false;
+			});
+		};
+	})
 	.use(function improveExpressiveCodeHandling() {
 		return (tree) => {
 			const ecInstances = selectAll('.expressive-code', tree as Parameters<typeof selectAll>[1]);
@@ -149,15 +166,30 @@ export async function entryToSimpleMarkdown(
 	context: APIContext,
 	shouldMinify: boolean = false
 ) {
-	const { Content } = await render(entry);
-	const html = await astroContainer.renderToString(Content, context);
-	const file = await htmlToMarkdownPipeline.process({
-		value: html,
-		data: { starlightLlmsTxt: { minify: shouldMinify } },
-	});
-	let markdown = String(file).trim();
-	if (shouldMinify && minify.whitespace) {
-		markdown = markdown.replace(/\s+/g, ' ');
+	try {
+		const { Content } = await render(entry);
+		let html;
+		try {
+			html = await astroContainer.renderToString(Content, context);
+		} catch (error) {
+			// If rendering fails, return a simplified version of the content
+			console.error(`Error rendering content for ${entry.id}: ${error instanceof Error ? error.message : String(error)}`);
+			// Return a placeholder for the content that couldn't be rendered
+			return `Content for ${entry.id} could not be fully rendered due to component compatibility issues.`;
+		}
+		
+		const file = await htmlToMarkdownPipeline.process({
+			value: html,
+			data: { starlightLlmsTxt: { minify: shouldMinify } },
+		});
+		let markdown = String(file).trim();
+		if (shouldMinify && minify.whitespace) {
+			markdown = markdown.replace(/\s+/g, ' ');
+		}
+		return markdown;
+	} catch (error) {
+		console.error(`Error processing content for ${entry.id}: ${error instanceof Error ? error.message : String(error)}`);
+		// Return a placeholder for the content that couldn't be processed
+		return `Content for ${entry.id} could not be processed due to compatibility issues.`;
 	}
-	return markdown;
 }
