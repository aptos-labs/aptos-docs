diff --git a/entryToSimpleMarkdown.ts b/entryToSimpleMarkdown.ts
index 1bd6fbfb1f35df938061693de3bebe627b74c8c3..996e2572bf2ee451f29df5a910458dcb3eecf098 100644
--- a/entryToSimpleMarkdown.ts
+++ b/entryToSimpleMarkdown.ts	
@@ -34,6 +34,23 @@ const astroContainer = await experimental_AstroContainer.create({
 
 const htmlToMarkdownPipeline = unified()
 	.use(rehypeParse, { fragment: true })
+	.use(function skipReactComponents() {
+		return (tree) => {
+			// Find and remove React components
+			remove(tree, (_node) => {
+				const node = _node as RootContent;
+				
+				// Check for client:only="react" attribute
+				if (node.type === 'element' && node.properties) {
+					const clientOnly = node.properties['client:only'];
+					if (clientOnly === 'react') {
+						return true; // Remove React components entirely
+					}
+				}
+				return false;
+			});
+		};
+	})
 	.use(function minifyLlmsTxt() {
 		return (tree, file) => {
 			if (!file.data.starlightLlmsTxt.minify) {
@@ -149,15 +166,27 @@ export async function entryToSimpleMarkdown(
 	context: APIContext,
 	shouldMinify: boolean = false
 ) {
-	const { Content } = await render(entry);
-	const html = await astroContainer.renderToString(Content, context);
-	const file = await htmlToMarkdownPipeline.process({
-		value: html,
-		data: { starlightLlmsTxt: { minify: shouldMinify } },
-	});
-	let markdown = String(file).trim();
-	if (shouldMinify && minify.whitespace) {
-		markdown = markdown.replace(/\s+/g, ' ');
+	try {
+		const { Content } = await render(entry);
+		let html;
+		try {
+			html = await astroContainer.renderToString(Content, context);
+		} catch (error) {
+			// If rendering fails, return a simplified version of the content without logging the error
+			return `Content for ${entry.id} could not be fully rendered due to component compatibility issues.`;
+		}
+		
+		const file = await htmlToMarkdownPipeline.process({
+			value: html,
+			data: { starlightLlmsTxt: { minify: shouldMinify } },
+		});
+		let markdown = String(file).trim();
+		if (shouldMinify && minify.whitespace) {
+			markdown = markdown.replace(/\s+/g, ' ');
+		}
+		return markdown;
+	} catch (error) {
+		// Return a placeholder for the content that couldn't be processed without logging the error
+		return `Content for ${entry.id} could not be processed due to compatibility issues.`;
 	}
-	return markdown;
 }
