diff --git a/index.ts b/index.ts
index 9405a9f453a727f816428385911ffc6ee1850290..46b503900c5a1ae5961f1cc3a4ab87b1410ab902 100644
--- a/index.ts
+++ b/index.ts	
@@ -9,7 +9,11 @@ import { getSidebarGroupPlaceholder, getSidebarGroupsPlaceholder } from './libs/
 
 export const openAPISidebarGroups = getSidebarGroupsPlaceholder()
 
-export default function starlightOpenAPIPlugin(userConfig: StarlightOpenAPIUserConfig): StarlightPlugin {
+type StarlightOpenAPIOptions = {
+  routeEntrypoint?: string
+}
+
+export default function starlightOpenAPIPlugin(schemaConfigs: StarlightOpenAPIUserConfig, options?: StarlightOpenAPIOptions): StarlightPlugin {
   return {
     name: 'starlight-openapi-plugin',
     hooks: {
@@ -25,11 +29,11 @@ export default function starlightOpenAPIPlugin(userConfig: StarlightOpenAPIUserC
           return
         }
 
-        const config = validateConfig(logger, userConfig)
+        const config = validateConfig(logger, schemaConfigs)
         const schemas = await Promise.all(config.map((schemaConfig) => parseSchema(logger, schemaConfig)))
 
         addRouteMiddleware({ entrypoint: 'starlight-openapi/middleware', order: 'post' })
-        addIntegration(starlightOpenAPIIntegration(schemas))
+        addIntegration(starlightOpenAPIIntegration(schemas, options?.routeEntrypoint))
 
         const updatedConfig: Parameters<typeof updateConfig>[0] = {
           customCss: [...(starlightConfig.customCss ?? []), 'starlight-openapi/styles'],
diff --git a/libs/integration.ts b/libs/integration.ts
index d647301e157800211add2343f03b1e4baf36e731..cfa303dd0ebd68f2899b06d2b142152bce94d409 100644
--- a/libs/integration.ts
+++ b/libs/integration.ts	
@@ -3,13 +3,14 @@ import type { AstroIntegration } from 'astro'
 import type { Schema } from './schema'
 import { vitePluginStarlightOpenAPI } from './vite'
 
-export function starlightOpenAPIIntegration(schemas: Schema[]): AstroIntegration {
+export function starlightOpenAPIIntegration(schemas: Schema[], entrypoint?: string): AstroIntegration {
   const starlightOpenAPI: AstroIntegration = {
     name: 'starlight-openapi',
     hooks: {
       'astro:config:setup': ({ config, injectRoute, updateConfig }) => {
+        // pageComponent
         injectRoute({
-          entrypoint: 'starlight-openapi/route',
+          entrypoint: entrypoint ?? 'starlight-openapi/route',
           pattern: `[...openAPISlug]`,
           prerender: true,
         })
diff --git a/libs/route.ts b/libs/route.ts
index 182b92fa1ac6dd13130ec6d8311938ff6f3792c9..6bc06f2dfea3959029d19bf54e269675880785a3 100644
--- a/libs/route.ts
+++ b/libs/route.ts	
@@ -1,4 +1,5 @@
-import schemas from 'virtual:starlight-openapi-schemas'
+import schemas from "virtual:starlight-openapi-schemas";
+import config from "virtual:starlight/user-config";
 
 import {
   getOperationsByTag,
@@ -6,29 +7,63 @@ import {
   isMinimalOperationTag,
   type OperationTag,
   type PathItemOperation,
-} from './operation'
-import { getBasePath, slug, stripLeadingAndTrailingSlashes } from './path'
-import type { Schema } from './schema'
+} from "./operation";
+import { getBasePath, slug, stripLeadingAndTrailingSlashes } from "./path";
+import type { Schema } from "./schema";
+
+const DEFAULT_LOCALE = config.defaultLocale.lang ?? "en";
 
 export function getSchemaStaticPaths(): StarlighOpenAPIRoute[] {
-  return Object.values(schemas).flatMap((schema) => [
+  const routes = Object.values(schemas).flatMap<StarlighOpenAPIRoute>((schema) => [
     {
       params: {
         openAPISlug: stripLeadingAndTrailingSlashes(getBasePath(schema.config)),
       },
       props: {
         schema,
-        type: 'overview',
+        lang: DEFAULT_LOCALE,
+        type: "overview",
       },
     },
     ...getPathItemStaticPaths(schema),
     ...getWebhooksStaticPaths(schema),
-  ])
+  ]);
+  // Avoid infinite loop during building fallbacks
+  const routesCopy = [...routes];
+
+  // It is the same code by idea as in the starlight: https://github.com/withastro/starlight/blob/5a7e831aa36adb37545e66a9f014d8d98ec0ff64/packages/starlight/utils/routing/index.ts#L59-L87
+  if (config.isMultilingual) {
+    for (const key in config.locales) {
+      if (key === config.defaultLocale.locale) continue;
+      const localeConfig = config.locales[key];
+      if (!localeConfig) continue;
+      const locale = key === "root" ? undefined : key;
+
+      for (const nonLocalizedRoute of routesCopy) {
+        const fallbackRoute = {
+          ...nonLocalizedRoute,
+          params: {
+            ...nonLocalizedRoute.params,
+            openAPISlug: `${locale}/${nonLocalizedRoute.params.openAPISlug}`,
+          },
+          props: {
+            ...nonLocalizedRoute.props,
+            lang: DEFAULT_LOCALE,
+            isFallback: true,
+          },
+        } as StarlighOpenAPIRoute;
+
+        routes.push(fallbackRoute);
+      }
+    }
+  }
+
+  return routes;
 }
 
 function getPathItemStaticPaths(schema: Schema): StarlighOpenAPIRoute[] {
-  const baseLink = getBasePath(schema.config)
-  const operations = getOperationsByTag(schema)
+  const baseLink = getBasePath(schema.config);
+  const operations = getOperationsByTag(schema);
 
   return [...operations.entries()].flatMap(([, operations]) => {
     const paths: StarlighOpenAPIRoute[] = operations.entries.map((operation) => {
@@ -39,31 +74,35 @@ function getPathItemStaticPaths(schema: Schema): StarlighOpenAPIRoute[] {
         props: {
           operation,
           schema,
-          type: 'operation',
+          lang: DEFAULT_LOCALE,
+          type: "operation",
         },
-      }
-    })
+      };
+    });
 
     if (!isMinimalOperationTag(operations.tag)) {
       paths.unshift({
         params: {
-          openAPISlug: stripLeadingAndTrailingSlashes(`${baseLink}operations/tags/${slug(operations.tag.name)}`),
+          openAPISlug: stripLeadingAndTrailingSlashes(
+            `${baseLink}operations/tags/${slug(operations.tag.name)}`,
+          ),
         },
         props: {
           schema,
+          lang: DEFAULT_LOCALE,
           tag: operations.tag,
-          type: 'operation-tag',
+          type: "operation-tag",
         },
-      })
+      });
     }
 
-    return paths
-  })
+    return paths;
+  });
 }
 
 function getWebhooksStaticPaths(schema: Schema): StarlighOpenAPIRoute[] {
-  const baseLink = getBasePath(schema.config)
-  const operations = getWebhooksOperations(schema)
+  const baseLink = getBasePath(schema.config);
+  const operations = getWebhooksOperations(schema);
 
   return operations.map((operation) => ({
     params: {
@@ -72,31 +111,41 @@ function getWebhooksStaticPaths(schema: Schema): StarlighOpenAPIRoute[] {
     props: {
       operation,
       schema,
-      type: 'operation',
+      lang: DEFAULT_LOCALE,
+      type: "operation",
     },
-  }))
+  }));
 }
 
 interface StarlighOpenAPIRoute {
   params: {
-    openAPISlug: string
-  }
-  props: StarlighOpenAPIRouteOverviewProps | StarlighOpenAPIRouteOperationProps | StarlighOpenAPIRouteOperationTagProps
+    openAPISlug: string;
+  };
+  props:
+    | StarlighOpenAPIRouteOverviewProps
+    | StarlighOpenAPIRouteOperationProps
+    | StarlighOpenAPIRouteOperationTagProps;
 }
 
 interface StarlighOpenAPIRouteOverviewProps {
-  schema: Schema
-  type: 'overview'
+  schema: Schema;
+  lang: string;
+  isFallback?: true;
+  type: "overview";
 }
 
 interface StarlighOpenAPIRouteOperationProps {
-  operation: PathItemOperation
-  schema: Schema
-  type: 'operation'
+  operation: PathItemOperation;
+  schema: Schema;
+  lang: string;
+  isFallback?: true;
+  type: "operation";
 }
 
 interface StarlighOpenAPIRouteOperationTagProps {
-  schema: Schema
-  tag: OperationTag
-  type: 'operation-tag'
+  schema: Schema;
+  tag: OperationTag;
+  lang: string;
+  isFallback?: true;
+  type: "operation-tag";
 }
diff --git a/libs/security.ts b/libs/security.ts
index 1287aa84257dd4d9b3ee944ea59d3e42916575e7..50616aaac23181c8f7afe881c6e995e7490b3da4 100644
--- a/libs/security.ts
+++ b/libs/security.ts	
@@ -7,7 +7,7 @@ import type { Schema } from './schema'
 export function getSecurityRequirements(operation: Operation, schema?: Schema): SecurityRequirement[] | undefined {
   if ('security' in operation) {
     return operation.security
-  } else if (schema && 'security' in schema.document) {
+  } else if (schema && schema.document && 'security' in schema.document) {
     return schema.document.security
   }
 
@@ -17,7 +17,7 @@ export function getSecurityRequirements(operation: Operation, schema?: Schema):
 export function getSecurityDefinitions(document: Document): SecurityDefinitions | undefined {
   if ('securityDefinitions' in document) {
     return document.securityDefinitions
-  } else if ('components' in document && 'securitySchemes' in document.components) {
+  } else if ('components' in document && document.components && 'securitySchemes' in document.components) {
     return document.components.securitySchemes as SecurityDefinitions
   }
 
diff --git a/package.json b/package.json
index 50aa61d3acda0f553f5b93199b69be8f5e15c4d6..2cb798f707cd7fc35ae449fe03f5c9131d27fcc8 100644
--- a/package.json
+++ b/package.json	
@@ -7,6 +7,7 @@
   "type": "module",
   "exports": {
     ".": "./index.ts",
+    "./libs/*": "./libs/*.ts",
     "./middleware": "./middleware.ts",
     "./route": "./components/Route.astro",
     "./styles": "./styles.css",
