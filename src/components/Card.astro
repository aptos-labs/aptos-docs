---
// Import specific icons that we want to support
import IconLightning from "~icons/ph/lightning";
import IconTerminal from "~icons/ph/terminal";
import IconFileText from "~icons/ph/file-text";
import IconGlobeSimple from "~icons/ph/globe-simple";

interface Props {
  iconName?: string;
  title: string;
  iconProps?: Record<string, string | boolean>;
}

const { iconName, title, iconProps = {} } = Astro.props;

// Default icon props that will be applied to all icons
const defaultIconProps = {
  "font-size": "1.5rem",
  "aria-hidden": true,
};

// Merge default props with user-provided props (user props take precedence)
const mergedIconProps = { ...defaultIconProps, ...iconProps };

// Map of icon names to components
const iconMap = {
  lightning: IconLightning,
  terminal: IconTerminal,
  "file-text": IconFileText,
  "globe-simple": IconGlobeSimple,
} as const;

// Get the icon component based on the iconName
const IconComponent =
  iconName && iconName in iconMap ? iconMap[iconName as keyof typeof iconMap] : null;
---

<article class="card sl-flex">
  <p class="title sl-flex">
    {
      IconComponent && (
        <span class="icon">
          <IconComponent {...mergedIconProps} />
        </span>
      )
    }
    <span set:html={title} />
  </p>
  <div class="body"><slot /></div>
</article>

<style>
  .card {
    --sl-card-border: var(--sl-color-purple);
    --sl-card-bg: var(--sl-color-purple-low);
    border: 1px solid var(--sl-color-gray-5);
    background-color: var(--sl-color-black);
    padding: clamp(1rem, calc(0.125rem + 3vw), 2.5rem);
    flex-direction: column;
    gap: clamp(0.5rem, calc(0.125rem + 1vw), 1rem);
    border-radius: var(--global-radius);
  }
  .card:nth-child(4n + 1) {
    --sl-card-border: var(--sl-color-orange);
    --sl-card-bg: var(--sl-color-orange-low);
  }
  .card:nth-child(4n + 3) {
    --sl-card-border: var(--sl-color-green);
    --sl-card-bg: var(--sl-color-green-low);
  }
  .card:nth-child(4n + 4) {
    --sl-card-border: var(--sl-color-red);
    --sl-card-bg: var(--sl-color-red-low);
  }
  .card:nth-child(4n + 5) {
    --sl-card-border: var(--sl-color-blue);
    --sl-card-bg: var(--sl-color-blue-low);
  }
  .title {
    font-weight: 600;
    font-size: var(--sl-text-h4);
    color: var(--sl-color-white);
    line-height: var(--sl-line-height-headings);
    gap: 1rem;
    align-items: center;
  }
  /* .card .icon {
		border: 1px solid var(--sl-card-border);
		background-color: var(--sl-card-bg);
		padding: 0.2em;
		border-radius: 0.25rem;
		display: flex;
		align-items: center;
		justify-content: center;
	} */
  .card .body {
    margin: 0;
    font-size: clamp(var(--sl-text-sm), calc(0.5rem + 1vw), var(--sl-text-body));
  }

  .card .icon {
    color: var(--sl-color-text-accent);
    border: 1px solid var(--sl-color-gray-5);
    padding: 0.2em;
    border-radius: var(--global-radius);
  }
</style>
