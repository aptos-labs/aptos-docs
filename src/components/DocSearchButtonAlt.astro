---
import { ALGOLIA_APP_ID, ALGOLIA_SEARCH_API_KEY, ALGOLIA_INDEX_NAME } from "astro:env/client";
const hasAlgoliaConfig = ALGOLIA_APP_ID && ALGOLIA_SEARCH_API_KEY && ALGOLIA_INDEX_NAME;
---

{
  hasAlgoliaConfig && (
    <button
      type="button"
      class="DocSearch DocSearch-Button-Alt"
      aria-label={Astro.locals.t("searchAlt.label")}
    >
      <span class="DocSearch-Button-Alt-Container">
        <svg width="40" height="40" class="DocSearch-Search-Icon" viewBox="0 0 20 20">
          <path
            d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z"
            stroke="currentColor"
            fill="none"
            fill-rule="evenodd"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <span class="DocSearch-Button-Placeholder">{Astro.locals.t("searchAlt.label")}</span>
      </span>
      <span class="DocSearch-Button-Keys" />
    </button>
  )
}
<script is:inline define:vars={{ hasAlgoliaConfig }}>
  if (hasAlgoliaConfig) {
    // Wait for the page to load
    document.addEventListener("DOMContentLoaded", () => {
      // Get our custom button
      const docSearchButtonAlt = document.querySelector(".DocSearch-Button-Alt");

      // Add click event listener
      docSearchButtonAlt?.addEventListener("click", () => {
        // Find the original DocSearch button and programmatically click it
        const docSearchButton = document.querySelector(".DocSearch-Button");
        if (docSearchButton instanceof HTMLElement) {
          docSearchButton.click();
        }
      });
    });
  }
</script>

<style>
  .DocSearch-Button-Alt {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border: 0;
    background-color: transparent;
    color: var(--sl-color-gray-2);
    cursor: pointer;
    height: 3.5rem;
    font-size: var(--sl-text-md);
    width: 100%;
    background-color: var(--sl-color-black);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: var(--global-radius);
    padding-inline-start: 1rem;
    padding-inline-end: 1rem;
  }
  .DocSearch-Button-Alt-Container {
    display: contents;
  }
  .DocSearch-Search-Icon {
    width: 1.25em;
    height: 1.25em;
    stroke-width: 0.125rem;
  }

  .DocSearch-Button-Alt:hover {
    border-color: var(--sl-color-text-accent);
    color: var(--sl-color-white);
  }

  .DocSearch-Button-Alt-Placeholder,
  .DocSearch-Button-Alt-Keys {
    display: flex;
  }
  .DocSearch-Button-Alt-Keys {
    margin-inline-start: auto;
  }
  .DocSearch-Button-Alt-Keys::before {
    content: "";
    width: 1em;
    height: 1em;
    -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M17 2H7a5 5 0 0 0-5 5v10a5 5 0 0 0 5 5h10a5 5 0 0 0 5-5V7a5 5 0 0 0-5-5Zm3 15a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3V7a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v10Z'%3E%3C/path%3E%3Cpath d='M15.293 6.707a1 1 0 1 1 1.414 1.414l-8.485 8.486a1 1 0 0 1-1.414-1.415l8.485-8.485Z'%3E%3C/path%3E%3C/svg%3E");
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M17 2H7a5 5 0 0 0-5 5v10a5 5 0 0 0 5 5h10a5 5 0 0 0 5-5V7a5 5 0 0 0-5-5Zm3 15a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3V7a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v10Z'%3E%3C/path%3E%3Cpath d='M15.293 6.707a1 1 0 1 1 1.414 1.414l-8.485 8.486a1 1 0 0 1-1.414-1.415l8.485-8.485Z'%3E%3C/path%3E%3C/svg%3E");
    -webkit-mask-size: 100%;
    mask-size: 100%;
    background-color: currentColor;
  }
</style>
