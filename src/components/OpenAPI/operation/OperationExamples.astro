---
import { snippetz, type ClientId } from "@scalar/snippetz";
import OperationExample, { type ExampleData } from "./OperationExample.astro";

type Props = ExampleData;

const INITIAL_TARGET = "shell" as const;
const INITIAL_CLIENT: ClientId<typeof INITIAL_TARGET> = "curl";

const example: Props = Astro.props;
const targets = snippetz().clients();
---

<div class="operation-examples not-content">
  <div class:list={["flex items-center gap-2"]}>
    <select class:list={["border rounded"]} data-target-select>
      {
        targets.map((target) => (
          <option value={target.key} selected={INITIAL_TARGET === target.key}>
            {target.title}
          </option>
        ))
      }
    </select>
    <select class:list={["border rounded"]} data-client-select>
      {
        targets.flatMap((target) =>
          target.clients.map((client) => (
            <option
              value={client.client}
              data-target={client.target}
              data-visible={client.target === INITIAL_TARGET}
              selected={INITIAL_CLIENT === client.client}
            >
              {client.title}
            </option>
          )),
        )
      }
    </select>
  </div>
  <div>
    {
      targets.flatMap((target) =>
        target.clients.map((client) => (
          <OperationExample
            example={example}
            target={target.key}
            client={client.client}
            isActive={target.key === INITIAL_TARGET && client.client === INITIAL_CLIENT}
          />
        )),
      )
    }
  </div>
</div>

<style>
  [data-client-select] option[data-visible="false"] {
    display: none;
  }
</style>
<script>
  import { ensureNonNullable } from "~/lib/ensureNonNullable";

  const targetSelect = ensureNonNullable(
    document.querySelector<HTMLSelectElement>("[data-target-select]"),
    "Could not find target select",
  );
  const clientSelect = ensureNonNullable(
    document.querySelector<HTMLSelectElement>("[data-client-select]"),
    "Could not find client select",
  );

  function showExample(target: string, client: string) {
    const visibleExample = document.querySelector<HTMLElement>(
      `.operation-example[data-active="true"]`,
    );
    const targetExample = document.querySelector<HTMLElement>(
      `.operation-example[data-target="${target}"][data-client="${client}"]`,
    );

    visibleExample?.setAttribute("data-active", "false");
    targetExample?.setAttribute("data-active", "true");
  }

  targetSelect.addEventListener("change", () => {
    const newTarget = targetSelect.value;

    const clientOptions = clientSelect.querySelectorAll<HTMLOptionElement>(`option`);
    const oldVisibleOptions = [...clientOptions].filter(
      (option) => option.dataset.visible === "true",
    );
    const targetOptions = [...clientOptions].filter(
      (option) => option.dataset.target === newTarget,
    );
    const newClient = ensureNonNullable(
      targetOptions[0],
      `Could not find client option for selected target: ${newTarget}`,
    ).value;

    oldVisibleOptions.forEach((option) => {
      option.setAttribute("data-visible", "false");
    });
    targetOptions.forEach((option) => {
      option.setAttribute("data-visible", "true");
    });
    clientSelect.value = newClient;
    showExample(newTarget, newClient);
  });

  clientSelect.addEventListener("change", () => {
    showExample(targetSelect.value, clientSelect.value);
  });
</script>
