---
import { Tabs, TabItem } from "@astrojs/starlight/components";

import { getType } from "starlight-openapi/libs/items";
import {
  getSchemaObjects,
  type Discriminator,
  type SchemaObjects,
  type SchemaObject as SchemaObjectType,
} from "starlight-openapi/libs/schemaObject";
import Tag from "../Tag.astro";

import SchemaObject from "./SchemaObject.astro";

interface Props {
  discriminator: Discriminator;
  nested: boolean;
  parents?: SchemaObjectType[];
  schemaObject: SchemaObjectType;
  schemaObjects: SchemaObjects;
}

const {
  discriminator,
  nested,
  parents = [],
  schemaObjects: { schemaObjects, type },
} = Astro.props;

const discriminatorPropertyName =
  typeof discriminator === "string"
    ? discriminator
    : typeof discriminator === "object"
      ? discriminator.propertyName
      : undefined;

const humanReadableType: Record<SchemaObjects["type"], string> = {
  anyOf: "Any of",
  oneOf: "One of",
};

function isCircularArrayItem(item: SchemaObjectType, parents: SchemaObjectType[] = []): boolean {
  if (parents.some((parent) => parent === item)) {
    return true;
  }

  if (
    item.type !== "array" ||
    !item.items ||
    "$ref" in item.items ||
    item.items.type !== "object"
  ) {
    return false;
  }

  const nestedSchemaObjects = getSchemaObjects(item.items);

  return (
    nestedSchemaObjects?.schemaObjects.some((nestedSchemaObject) =>
      isCircularArrayItem(nestedSchemaObject, [...parents, item]),
    ) ?? false
  );
}
---

<div>
  <span class="type">{humanReadableType[type]}:</span>
  {discriminatorPropertyName && <Tag>discriminator: {discriminatorPropertyName}</Tag>}
</div>
<Tabs>
  {
    schemaObjects.map((schemaObject) => (
      <TabItem label={schemaObject.title ?? getType(schemaObject) ?? "unknown"}>
        {isCircularArrayItem(schemaObject) ? (
          "Self reference"
        ) : (
          <SchemaObject {parents} {nested} schemaObject={schemaObject} />
        )}
      </TabItem>
    ))
  }
</Tabs>

<style>
  div {
    margin-bottom: 0.5rem;
  }

  .type {
    margin-inline-end: 0.3rem;
    text-decoration: underline;
    text-underline-offset: 0.3rem;
  }
</style>
