---
---

<div class="sl-flex">
  <button 
    aria-label="Toggle text size" 
    class="sl-flex text-toggle-btn"
  >
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="text-icon">
      <path d="M12 6v12M6 12h12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
    </svg>
    <span class="sl-hidden md:sl-block">Text Size</span>
  </button>
  <div class="size-options sl-shadow-lg" hidden>
    <button data-size="normal">Normal</button>
    <button data-size="large">Large</button>
    <button data-size="xl">Extra Large</button>
  </div>
</div>

<script>
  // Handle toggle and localStorage persistence
  const root = document.documentElement;
  const toggle = document.querySelector('.text-toggle-btn');
  const options = document.querySelector('.size-options');
  
  // Load saved preference
  const savedSize = localStorage.getItem('text-size') || 'normal';
  root.dataset.textSize = savedSize;
  
  // Toggle menu
  toggle?.addEventListener('click', () => {
    options?.toggleAttribute('hidden');
  });
  
  // Close menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!toggle?.contains(e.target as Node) && !options?.contains(e.target as Node)) {
      options?.setAttribute('hidden', '');
    }
  });
  
  // Handle size selection
  options?.addEventListener('click', (e) => {
    const button = e.target as HTMLButtonElement;
    const size = button.dataset.size;
    if (size) {
      root.dataset.textSize = size;
      localStorage.setItem('text-size', size);
      options.setAttribute('hidden', '');
    }
  });
</script>

<style>
  .sl-flex {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .text-toggle-btn {
    padding: 0.5rem;
    gap: 0.5rem;
    border: 0;
    background-color: transparent;
    border-radius: 0.5rem;
    color: var(--sl-color-gray-1);
    cursor: pointer;
    font-size: var(--sl-text-sm);
    line-height: 1;
  }

  .text-toggle-btn:hover {
    color: var(--sl-color-white);
    background-color: var(--sl-color-gray-5);
  }

  [data-theme='light'] .text-toggle-btn:hover {
    color: var(--sl-color-black);
    background-color: var(--sl-color-gray-2);
  }

  .text-icon {
    width: 1em;
    height: 1em;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  .size-options {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    background: var(--sl-color-bg);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    padding: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    min-width: 150px;
    z-index: 50;
  }

  .size-options button {
    width: 100%;
    text-align: left;
    padding: 0.5rem;
    background: transparent;
    border: none;
    border-radius: 0.25rem;
    color: var(--sl-color-gray-2);
    cursor: pointer;
    font-size: var(--sl-text-sm);
    transition: all 0.2s ease;
  }

  .size-options button:hover {
    color: var(--sl-color-white);
    background-color: var(--sl-color-gray-5);
  }

  [data-theme='light'] .size-options button:hover {
    color: var(--sl-color-black);
    background-color: var(--sl-color-gray-2);
  }
</style>
