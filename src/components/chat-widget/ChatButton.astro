---
import { Image } from "astro:assets";
import aptosLogoDark from "~/assets/aptos-logomark-dark.svg";
import aptosLogoLight from "~/assets/aptos-logomark-light.svg";

interface Props {
  isMobile?: boolean;
}

const { isMobile = false } = Astro.props;
---

<button
  id={isMobile ? "mobile-chat-trigger" : "chat-trigger"}
  class={isMobile ? "mobile-chat-button" : "desktop-chat-button"}
  aria-label="Open chat"
>
  <div class={`icon-wrapper ${isMobile ? "mobile-icon" : ""}`}>
    <Image
      src={aptosLogoLight}
      class="hidden dark:block w-5 h-5"
      alt="Aptos Logo"
      width={20}
      height={20}
      fetchpriority="high"
    />
    <Image
      src={aptosLogoDark}
      class="dark:hidden w-5 h-5"
      alt="Aptos Logo"
      width={20}
      height={20}
      fetchpriority="high"
    />
  </div>
  <span class="text-sm font-semibold">AskAptos</span>
</button>

<!-- Chat overlay that shows immediately -->
<div id="chat-overlay" class="chat-overlay hidden">
  <div class="chat-loading-content">
    <div class="chat-loading-spinner">
      <div class="spinner"></div>
    </div>
    <p class="chat-loading-text">Loading AskAptos...</p>
  </div>
</div>

<script>
  const mobileButton = document.getElementById("mobile-chat-trigger");
  const desktopButton = document.getElementById("chat-trigger");
  const loadingOverlay = document.getElementById("chat-overlay");

  function showLoadingOverlay() {
    if (loadingOverlay) {
      loadingOverlay.classList.remove("hidden");
      loadingOverlay.classList.add("visible");
    }
  }

  function hideLoadingOverlay() {
    if (loadingOverlay) {
      loadingOverlay.classList.remove("visible");
      loadingOverlay.classList.add("hidden");
    }
  }

  function handleChatToggle() {
    // Show loading overlay immediately
    showLoadingOverlay();

    // Dispatch the event to load the React component
    window.dispatchEvent(new CustomEvent("toggle-chat"));

    // Close the mobile menu when opening chat
    if (document.body.hasAttribute("data-mobile-menu-expanded")) {
      document.body.removeAttribute("data-mobile-menu-expanded");
      const menuButton = document.querySelector("starlight-menu-button");
      if (menuButton) {
        menuButton.setAttribute("aria-expanded", "false");
      }
    }

    // Set up cleanup controller
    const controller = new AbortController();

    const cleanup = () => {
      hideLoadingOverlay();
      controller.abort();
    };

    // Hide loading when React component is ready
    window.addEventListener("chat-ready", cleanup, {
      once: true,
      signal: controller.signal,
    });

    // Also hide loading if dialog is closed before ready
    window.addEventListener("chat-closed", cleanup, {
      once: true,
      signal: controller.signal,
    });

    // Fallback: hide loading after 30 seconds (safety mechanism for extreme cases)
    setTimeout(() => {
      if (!controller.signal.aborted) {
        cleanup();
      }
    }, 30000);
  }

  if (mobileButton) {
    mobileButton.addEventListener("click", handleChatToggle);
  }

  if (desktopButton) {
    desktopButton.addEventListener("click", handleChatToggle);
  }
</script>

<style>
  /* Desktop styles */
  .desktop-chat-button {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    background-color: var(--sl-color-white);
    border: 1px solid var(--sl-color-gray-5);
    color: var(--sl-color-black);
    cursor: pointer;
  }

  :global([data-theme="dark"]) .desktop-chat-button {
    background-color: var(--sl-color-white);
    border-color: var(--sl-color-gray-5);
    color: var(--sl-color-black);
  }

  .desktop-chat-button:hover {
    background-color: var(--sl-color-gray-2);
  }

  :global([data-theme="dark"]) .desktop-chat-button:hover {
    background-color: var(--sl-color-gray-1);
  }

  /* Mobile styles */
  .mobile-chat-button {
    display: flex;
    align-items: center;
    gap: 1rem;
    width: 100%;
    padding: 0.75rem var(--sl-sidebar-pad-x);
    border: none;
    background: none;
    cursor: pointer;
    color: var(--sl-color-text);
    font-size: var(--sl-text-lg);
    text-align: left;
  }

  .mobile-chat-button:hover {
    color: var(--sl-color-text-accent);
    background-color: var(--sl-color-gray-6, var(--sl-color-gray-5));
  }

  /* Common icon styles */
  .icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.75rem;
    height: 1.75rem;
    border-radius: 9999px;
    background: linear-gradient(to right, #61dd89, #05eeef);
    padding: 0.25rem;
  }

  :global([data-theme="dark"]) .icon-wrapper {
    background: var(--sl-color-black);
    box-shadow: 0 0 0 2px #05eeef;
    padding: 0.25rem;
  }

  :global([data-theme="dark"]) .icon-wrapper img {
    filter: brightness(0) invert(1);
  }

  .mobile-icon {
    width: 2rem;
    height: 2rem;
    padding: 0.375rem;
  }

  :global([data-theme="dark"]) .mobile-icon {
    padding: 0.375rem;
  }

  /* Loading overlay styles */
  .chat-overlay {
    position: fixed;
    inset: 0;
    background: color-mix(in srgb, var(--sl-color-black) 70%, transparent);
    backdrop-filter: blur(6px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    opacity: 0;
    transition: opacity 0.2s ease-out;
  }

  .chat-overlay.visible {
    opacity: 1;
  }

  .chat-overlay.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .chat-loading-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 2rem;
    background-color: var(--sl-color-black);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.75rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  .chat-loading-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid var(--sl-color-gray-5);
    border-top: 2px solid var(--sl-color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .chat-loading-text {
    color: var(--sl-color-white);
    font-size: var(--sl-text-sm);
    margin: 0;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>
