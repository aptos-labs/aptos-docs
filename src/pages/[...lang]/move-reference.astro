---
import { getCollection } from "astro:content";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { CardGrid, LinkCard, Tabs, TabItem } from "@astrojs/starlight/components";
import type { CollectionEntry } from "astro:content";
import { SUPPORTED_LANGUAGES } from "../../config/locales";

export async function getStaticPaths() {
  return SUPPORTED_LANGUAGES.map(({ code }) => ({
    params: { lang: code === "en" ? undefined : code },
    props: { lang: code },
  }));
}

const { lang } = Astro.props as { lang: string };
const moveReferenceEntries = await getCollection("moveReference");

type MoveReferenceEntry = CollectionEntry<"moveReference">;
// Map network names to their respective branches
const NETWORK_BRANCHES = {
  mainnet: "mainnet",
  testnet: "testnet",
  devnet: "devnet"
} as const;

type Network = keyof typeof NETWORK_BRANCHES;

// Group entries by network and framework
const groupedEntries = moveReferenceEntries.reduce((acc, entry) => {
  const branch = entry.data.branch as string;
  const framework = entry.data.framework as string;

  // Only include entries for our defined networks
  if (branch in NETWORK_BRANCHES) {
    if (!acc[branch]) {
      acc[branch] = {};
    }
    if (!acc[branch][framework]) {
      acc[branch][framework] = [];
    }
    acc[branch][framework].push(entry);
  }
  return acc;
}, {} as Record<string, Record<string, MoveReferenceEntry[]>>);

// Get entries for a specific network
const getNetworkFrameworks = (network: Network) => {
  const branch = NETWORK_BRANCHES[network];
  const entries = groupedEntries[branch] || {};
  return Object.entries(entries);
};
---

<StarlightPage frontmatter={{ title: "Move Reference" }}>
  <Tabs>
    <TabItem label="Mainnet" icon="star">
      {getNetworkFrameworks("mainnet").map(([framework, entries]) => (
        <div class="framework-section">
          <h3>{framework}</h3>
          <CardGrid>
            {entries.map((entry) => (
              <LinkCard
                href={
                  lang === "en"
                    ? `/move-reference/${entry.id}`
                    : `/${lang}/move-reference/${entry.id}`
                }
                title={entry.data.title || entry.id.split("/").pop()}
              />
            ))}
          </CardGrid>
        </div>
      ))}
    </TabItem>
    <TabItem label="Testnet" icon="setting">
      {getNetworkFrameworks("testnet").map(([framework, entries]) => (
        <div class="framework-section">
          <h3>{framework}</h3>
          <CardGrid>
            {entries.map((entry) => (
              <LinkCard
                href={
                  lang === "en"
                    ? `/move-reference/${entry.id}`
                    : `/${lang}/move-reference/${entry.id}`
                }
                title={entry.data.title || entry.id.split("/").pop()}
              />
            ))}
          </CardGrid>
        </div>
      ))}
    </TabItem>
    <TabItem label="Devnet" icon="rocket">
      {getNetworkFrameworks("devnet").map(([framework, entries]) => (
        <div class="framework-section">
          <h3>{framework}</h3>
          <CardGrid>
            {entries.map((entry) => (
              <LinkCard
                href={
                  lang === "en"
                    ? `/move-reference/${entry.id}`
                    : `/${lang}/move-reference/${entry.id}`
                }
                title={entry.data.title || entry.id.split("/").pop()}
              />
            ))}
          </CardGrid>
        </div>
      ))}
    </TabItem>
  </Tabs>
</StarlightPage>

<style>
  .framework-section {
    margin: 1.5rem 0;
  }
  h3 {
    font-size: var(--sl-text-xl);
    color: var(--sl-color-gray-2);
    margin: 0.5rem 0;
  }
</style>
