---
import { getCollection } from "astro:content";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import FallbackContentNotice from "@astrojs/starlight/components/FallbackContentNotice.astro";
import { SUPPORTED_LANGUAGES } from "~/config/i18n.mjs";
import LinkList from "~/components/LinkList.astro";
import { isMoveReferenceEnabled } from "~/utils/isMoveReferenceEnabled";

export async function getStaticPaths() {
  if (!isMoveReferenceEnabled()) {
    return [];
  }

  const moveReferenceEntries = await getCollection("moveReference");
  const uniqueCombinations = new Map(
    moveReferenceEntries.map((entry) => [
      `${entry.data.network}-${entry.data.framework}`,
      {
        network: entry.data.network,
        framework: entry.data.framework,
        title: entry.data.title,
        description: entry.data.description,
      },
    ]),
  );

  return Array.from(uniqueCombinations.values()).flatMap(({ network, framework }) => {
    return SUPPORTED_LANGUAGES.map(({ code }) => ({
      params: {
        lang: code === "en" ? undefined : code,
        network,
        framework,
      },
      props: {
        lang: code,
        network,
        framework,
      },
    }));
  });
}

interface Props {
  lang: string;
  network: string;
  framework: string;
}

const { lang, network, framework } = Astro.props;

// Get all entries for this network/framework combination
const entries = await getCollection(
  "moveReference",
  (entry) => entry.data.network === network && entry.data.framework === framework,
);

// Sort entries by module name
// Filter out overview.md and sort remaining entries
const sortedEntries = entries
  .filter((entry) => entry.data.title !== "overview")
  .sort((a, b) => a.data.title.localeCompare(b.data.title));

const description =
  entries.find((e) => e.data.description)?.data.description ??
  `Documentation for ${framework} modules on ${network}`;
---

<StarlightPage
  frontmatter={{
    title: `${framework} (${network})`,
    description: description,
  }}
>
  {Astro.currentLocale !== "en" && <FallbackContentNotice />}
  <h2>Overview</h2>
  <p>{description}</p>
  <h2>Select a module</h2>
  <p>Choose a module to view its documentation.</p>
  <LinkList
    items={sortedEntries.map((entry) => ({
      href: lang === "en" ? `/move-reference/${entry.id}` : `/${lang}/move-reference/${entry.id}`,
      label: entry.data.title,
      prefix: "0x1::",
    }))}
  />
</StarlightPage>

<style>
  .metadata {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
  }
  .branch,
  .framework {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 999px;
    font-size: var(--sl-text-sm);
    font-weight: 500;
  }
  .branch {
    background-color: var(--sl-color-blue-high);
    color: var(--sl-color-white);
  }
  .framework {
    background-color: var(--sl-color-gray-5);
    color: var(--sl-color-gray-1);
  }
</style>
