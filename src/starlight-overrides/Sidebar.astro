---
// Handle Starlight sidebar integration
import { Icon } from "astro-icon/components";
import SidebarPersister from "@astrojs/starlight/components/SidebarPersister.astro";
import SidebarSublist from "@astrojs/starlight/components/SidebarSublist.astro";
import MobileMenuFooter from "@astrojs/starlight/components/MobileMenuFooter.astro";
import { stripLeadingAndTrailingSlashes } from "node_modules/@astrojs/starlight/utils/path";
import TabbedContent from "~/components/tabs/TabbedContent.astro";
import TabListItem from "~/components/tabs/TabListItem.astro";
import TabPanel from "~/components/tabs/TabPanel.astro";
import { stripLangFromSlug } from "~/utils/path-utils";
import { isSubPage } from "~/utils/isSubPage";

// Constants
const MOVE_REFERENCE_PATH = "move-reference";

// Get sidebar data
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const sidebarData = Astro.locals.starlightRoute ? Astro.locals.starlightRoute.sidebar : [];
const { id } = Astro.props;
const currentPath = Astro.url.pathname;

// Simple and direct check for Move Reference pages in any URL format
const isMoveReference = currentPath.includes(`/${MOVE_REFERENCE_PATH}`);

// // Debug the values to console (can be removed after confirming it works)
// console.log('Current Path:', currentPath);
// console.log('Is Move Reference:', isMoveReference);

// Interface for sidebar entries
interface SidebarEntryType {
  type: string;
  label: string;
  href?: string;
  isCurrent?: boolean;
  attrs?: Record<string, string>;
  entries?: SidebarEntryType[];
  [key: string]: unknown;
}

// Process sidebar entries to mark current pages
function markEntries(i: SidebarEntryType): void {
  if (i.type === "group" && i.entries) {
    i.entries.forEach(markEntries);
  } else if (i.href) {
    const itemSlug = stripLeadingAndTrailingSlashes(i.href);
    const itemSlugWithoutLang = stripLangFromSlug(itemSlug);

    // Only highlight the specific move-reference page that's currently being visited
    if (
      isMoveReference &&
      (itemSlug.includes(MOVE_REFERENCE_PATH) || itemSlugWithoutLang.includes(MOVE_REFERENCE_PATH))
    ) {
      // Check if the current path matches or is a subpath of this specific item
      const currentPathWithoutLang = stripLangFromSlug(stripLeadingAndTrailingSlashes(currentPath));
      i.isCurrent =
        currentPathWithoutLang === itemSlugWithoutLang ||
        currentPathWithoutLang.startsWith(itemSlugWithoutLang + "/");
      if (i.isCurrent) return; // Exit early only if we've found a match
    }

    if (i.isCurrent !== undefined) {
      // Regular check for other pages
      i.isCurrent = i.isCurrent || isSubPage(id, itemSlugWithoutLang);
    }
  }
}

// Apply markEntries to all sidebar items if they exist
if (Array.isArray(sidebarData)) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (sidebarData as any[]).forEach((item) => {
    if (item) markEntries(item as SidebarEntryType);
  });
}

// Validate sidebar structure
function assertGroups(sidebarItems: SidebarEntryType[]): SidebarEntryType[] {
  for (const entry of sidebarItems) {
    if (entry.type !== "group") {
      throw new Error("Top-level links are not permitted in the docs sidebar.");
    }
  }
  return sidebarItems;
}

// Create sidebar groups with validation
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const sidebarGroups = Array.isArray(sidebarData) ? assertGroups(sidebarData as any) : [];

// Generate id for tab panel from label
const makeId = (label: string): string => {
  if (!label) return "__tab-unknown";
  return "__tab-" + label.toLowerCase().replaceAll(/\s+/g, "-");
};

// Removed Starlight icon constants

// Get a Phosphor icon name based on index
function getIcon(index: number): string {
  // Default for invalid input
  if (typeof index !== "number" || index < 0) {
    return "ph:rocket-launch";
  }

  // Safe index calculation using Phosphor icons
  const modIndex = index % 5;
  if (modIndex === 0) return "ph:rocket-launch";
  if (modIndex === 1) return "ph:hard-drives";
  if (modIndex === 2) return "ph:brackets-curly";
  if (modIndex === 3) return "ph:file-text";
  if (modIndex === 4) return "ph:book-open";
  return "ph:book-open";
}

// Check if a sidebar section contains the current page
function isCurrent(sidebarItems: SidebarEntryType[]): boolean {
  if (!Array.isArray(sidebarItems) || sidebarItems.length === 0) return false;

  return sidebarItems.some((entry) => {
    if (!entry) return false;

    if (entry.type === "link") {
      return !!entry.isCurrent;
    } else if (entry.type === "group" && Array.isArray(entry.entries) && entry.entries.length > 0) {
      return isCurrent(entry.entries);
    }
    return false;
  });
}
---

<SidebarPersister {...Astro.props}>
  <TabbedContent class="tabbed-sidebar">
    <Fragment slot="tab-list">
      {
        sidebarGroups.map(({ label, entries }, index) => (
          <TabListItem id={makeId(label)} initial={entries && isCurrent(entries)} class="tab-item">
            <Icon size="24" class="icon" name={getIcon(index)} /> {label}
          </TabListItem>
        ))
      }
    </Fragment>
    {
      sidebarGroups.map(({ label, entries }) => (
        <TabPanel id={makeId(label)} initial={entries && isCurrent(entries)}>
          {/* The entries are compatible with what SidebarSublist expects */}
          {entries && (
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            <SidebarSublist sublist={entries as any} />
          )}
        </TabPanel>
      ))
    }
  </TabbedContent>
</SidebarPersister>

<div class="md:sl-hidden">
  <MobileMenuFooter {...Astro.props} />
</div>

<style>
  /** Add "EN" to the end of sidebar items with the `fallback` class. */
  :global(.fallback)::after {
    content: "EN";
    vertical-align: super;
    font-size: 0.75em;
    font-weight: 700;
  }

  /** Align sponsors at sidebar bottom when there is room. */
  .desktop-footer {
    margin-top: auto;
  }

  /** Always show the scrollbar gutter. */
  :global(.sidebar-pane) {
    overflow-y: scroll;
  }

  /* Styles for the custom tab switcher. */
  .tabbed-sidebar {
    /* Layout variables */
    --tab-switcher-border-width: 1px;
    --tab-switcher-padding: calc(0.25rem - var(--tab-switcher-border-width));
    --tab-item-border-radius: var(--global-radius);
    --tab-switcher-border-radius: var(--global-radius);

    /* Color variables */
    --tab-switcher-border-color: var(--sl-color-hairline-light);
    --tab-switcher-background-color: var(--sl-color-gray-7, var(--sl-color-gray-6));
    --tab-switcher-text-color: var(--sl-color-gray-3);
    --tab-switcher-text-color--active: var(--sl-color-white);
    --tab-switcher-icon-color: var(--sl-color-gray-4);
    --tab-switcher-icon-color--active: var(--sl-color-text-accent);
    --tab-item-background-color--hover: var(--sl-color-gray-6);
    --tab-item-background-color--active: var(--sl-color-black);
    padding: 1rem var(--sl-sidebar-pad-x) 0;
  }
  /* Dark theme variations */
  :global([data-theme="dark"]) .tabbed-sidebar {
    --tab-switcher-text-color: var(--sl-color-gray-2);
    --tab-switcher-icon-color: var(--sl-color-gray-3);
    --tab-item-background-color--hover: var(--sl-color-gray-5);
  }

  @media (min-width: 50rem) {
    /* Dark theme variations with the desktop sidebar visible */
    :global([data-theme="dark"]) .tabbed-sidebar {
      --tab-switcher-background-color: color-mix(in srgb, var(--sl-color-white) 1%, transparent);
      --tab-item-background-color--hover: var(--sl-color-gray-6);
      --tab-item-background-color--active: var(--sl-color-gray-6);
    }
  }

  .tabbed-sidebar.tab-list {
    /* border: var(--tab-switcher-border-width) solid var(--tab-switcher-border-color); */
    border-radius: var(--tab-switcher-border-radius);
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    padding: var(--tab-switcher-padding);
    background-color: transparent;
    /* margin-bottom: 1.5rem; */
    padding: 1rem var(--sl-sidebar-pad-x);
    border-bottom: 1px solid var(--sl-color-hairline);
  }

  .tab-item :global(a) {
    border: var(--tab-switcher-border-width) solid transparent;
    border-radius: var(--tab-item-border-radius);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: calc(0.5rem - var(--tab-switcher-border-width));
    background-clip: padding-box;
    line-height: var(--sl-line-height-headings);
    text-decoration: none;
    color: var(--tab-switcher-text-color);
    font-weight: 600;
    font-size: large;
  }

  .tab-item :global(a:hover) {
    color: var(--tab-switcher-text-color--active);
    background-color: var(--tab-item-background-color--hover);
  }
  .tab-item :global(a[aria-selected="true"]) {
    border-color: var(--tab-switcher-border-color);
    color: var(--tab-switcher-text-color--active);
    background-color: var(--tab-item-background-color--active);
  }

  .icon {
    margin: 0.25rem;
    color: var(--tab-switcher-icon-color);
  }
  .tab-item :global(a:hover) .icon {
    color: inherit;
  }
  .tab-item :global(a[aria-selected="true"]) .icon {
    color: var(--tab-switcher-icon-color--active);
  }
</style>
